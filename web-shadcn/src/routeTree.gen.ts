/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ProjectsIndexLazyImport = createFileRoute('/projects/')()
const FormsIndexLazyImport = createFileRoute('/forms/')()
const DashboardsIndexLazyImport = createFileRoute('/dashboards/')()
const CommunicationsIndexLazyImport = createFileRoute('/communications/')()
const AutomationsIndexLazyImport = createFileRoute('/automations/')()
const FormsDesignerLazyImport = createFileRoute('/forms/designer')()
const DashboardsDesignerLazyImport = createFileRoute('/dashboards/designer')()
const CommunicationsContactsLazyImport = createFileRoute(
  '/communications/contacts',
)()
const AutomationsDesignerLazyImport = createFileRoute('/automations/designer')()
const AuthSignupLazyImport = createFileRoute('/auth/signup')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const AppSettingsLazyImport = createFileRoute('/app/settings')()
const AppChanelogLazyImport = createFileRoute('/app/chanelog')()
const FormsFormIdResponsesLazyImport = createFileRoute(
  '/forms/$formId/responses',
)()
const FormsFormIdPreviewLazyImport = createFileRoute('/forms/$formId/preview')()
const FormsFormIdFillLazyImport = createFileRoute('/forms/$formId/fill')()
const FormsFormIdAnalyticsLazyImport = createFileRoute(
  '/forms/$formId/analytics',
)()
const CommunicationsEmailsTemplatesLazyImport = createFileRoute(
  '/communications/emails/templates',
)()
const CommunicationsEmailsSchedulesLazyImport = createFileRoute(
  '/communications/emails/schedules',
)()
const CommunicationsEmailsDesignerLazyImport = createFileRoute(
  '/communications/emails/designer',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProjectsIndexLazyRoute = ProjectsIndexLazyImport.update({
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/projects/index.lazy').then((d) => d.Route),
)

const FormsIndexLazyRoute = FormsIndexLazyImport.update({
  path: '/forms/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/forms/index.lazy').then((d) => d.Route))

const DashboardsIndexLazyRoute = DashboardsIndexLazyImport.update({
  path: '/dashboards/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboards/index.lazy').then((d) => d.Route),
)

const CommunicationsIndexLazyRoute = CommunicationsIndexLazyImport.update({
  path: '/communications/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/communications/index.lazy').then((d) => d.Route),
)

const AutomationsIndexLazyRoute = AutomationsIndexLazyImport.update({
  path: '/automations/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/automations/index.lazy').then((d) => d.Route),
)

const FormsDesignerLazyRoute = FormsDesignerLazyImport.update({
  path: '/forms/designer',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forms/designer.lazy').then((d) => d.Route),
)

const DashboardsDesignerLazyRoute = DashboardsDesignerLazyImport.update({
  path: '/dashboards/designer',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboards/designer.lazy').then((d) => d.Route),
)

const CommunicationsContactsLazyRoute = CommunicationsContactsLazyImport.update(
  {
    path: '/communications/contacts',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/communications/contacts.lazy').then((d) => d.Route),
)

const AutomationsDesignerLazyRoute = AutomationsDesignerLazyImport.update({
  path: '/automations/designer',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/automations/designer.lazy').then((d) => d.Route),
)

const AuthSignupLazyRoute = AuthSignupLazyImport.update({
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/signup.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const AppSettingsLazyRoute = AppSettingsLazyImport.update({
  path: '/app/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/app/settings.lazy').then((d) => d.Route))

const AppChanelogLazyRoute = AppChanelogLazyImport.update({
  path: '/app/chanelog',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/app/chanelog.lazy').then((d) => d.Route))

const FormsFormIdResponsesLazyRoute = FormsFormIdResponsesLazyImport.update({
  path: '/forms/$formId/responses',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forms/$formId/responses.lazy').then((d) => d.Route),
)

const FormsFormIdPreviewLazyRoute = FormsFormIdPreviewLazyImport.update({
  path: '/forms/$formId/preview',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forms/$formId/preview.lazy').then((d) => d.Route),
)

const FormsFormIdFillLazyRoute = FormsFormIdFillLazyImport.update({
  path: '/forms/$formId/fill',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forms/$formId/fill.lazy').then((d) => d.Route),
)

const FormsFormIdAnalyticsLazyRoute = FormsFormIdAnalyticsLazyImport.update({
  path: '/forms/$formId/analytics',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forms/$formId/analytics.lazy').then((d) => d.Route),
)

const CommunicationsEmailsTemplatesLazyRoute =
  CommunicationsEmailsTemplatesLazyImport.update({
    path: '/communications/emails/templates',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/communications/emails/templates.lazy').then(
      (d) => d.Route,
    ),
  )

const CommunicationsEmailsSchedulesLazyRoute =
  CommunicationsEmailsSchedulesLazyImport.update({
    path: '/communications/emails/schedules',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/communications/emails/schedules.lazy').then(
      (d) => d.Route,
    ),
  )

const CommunicationsEmailsDesignerLazyRoute =
  CommunicationsEmailsDesignerLazyImport.update({
    path: '/communications/emails/designer',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/communications/emails/designer.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/chanelog': {
      id: '/app/chanelog'
      path: '/app/chanelog'
      fullPath: '/app/chanelog'
      preLoaderRoute: typeof AppChanelogLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/app/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/automations/designer': {
      id: '/automations/designer'
      path: '/automations/designer'
      fullPath: '/automations/designer'
      preLoaderRoute: typeof AutomationsDesignerLazyImport
      parentRoute: typeof rootRoute
    }
    '/communications/contacts': {
      id: '/communications/contacts'
      path: '/communications/contacts'
      fullPath: '/communications/contacts'
      preLoaderRoute: typeof CommunicationsContactsLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboards/designer': {
      id: '/dashboards/designer'
      path: '/dashboards/designer'
      fullPath: '/dashboards/designer'
      preLoaderRoute: typeof DashboardsDesignerLazyImport
      parentRoute: typeof rootRoute
    }
    '/forms/designer': {
      id: '/forms/designer'
      path: '/forms/designer'
      fullPath: '/forms/designer'
      preLoaderRoute: typeof FormsDesignerLazyImport
      parentRoute: typeof rootRoute
    }
    '/automations/': {
      id: '/automations/'
      path: '/automations'
      fullPath: '/automations'
      preLoaderRoute: typeof AutomationsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/communications/': {
      id: '/communications/'
      path: '/communications'
      fullPath: '/communications'
      preLoaderRoute: typeof CommunicationsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboards/': {
      id: '/dashboards/'
      path: '/dashboards'
      fullPath: '/dashboards'
      preLoaderRoute: typeof DashboardsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/forms/': {
      id: '/forms/'
      path: '/forms'
      fullPath: '/forms'
      preLoaderRoute: typeof FormsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/communications/emails/designer': {
      id: '/communications/emails/designer'
      path: '/communications/emails/designer'
      fullPath: '/communications/emails/designer'
      preLoaderRoute: typeof CommunicationsEmailsDesignerLazyImport
      parentRoute: typeof rootRoute
    }
    '/communications/emails/schedules': {
      id: '/communications/emails/schedules'
      path: '/communications/emails/schedules'
      fullPath: '/communications/emails/schedules'
      preLoaderRoute: typeof CommunicationsEmailsSchedulesLazyImport
      parentRoute: typeof rootRoute
    }
    '/communications/emails/templates': {
      id: '/communications/emails/templates'
      path: '/communications/emails/templates'
      fullPath: '/communications/emails/templates'
      preLoaderRoute: typeof CommunicationsEmailsTemplatesLazyImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId/analytics': {
      id: '/forms/$formId/analytics'
      path: '/forms/$formId/analytics'
      fullPath: '/forms/$formId/analytics'
      preLoaderRoute: typeof FormsFormIdAnalyticsLazyImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId/fill': {
      id: '/forms/$formId/fill'
      path: '/forms/$formId/fill'
      fullPath: '/forms/$formId/fill'
      preLoaderRoute: typeof FormsFormIdFillLazyImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId/preview': {
      id: '/forms/$formId/preview'
      path: '/forms/$formId/preview'
      fullPath: '/forms/$formId/preview'
      preLoaderRoute: typeof FormsFormIdPreviewLazyImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId/responses': {
      id: '/forms/$formId/responses'
      path: '/forms/$formId/responses'
      fullPath: '/forms/$formId/responses'
      preLoaderRoute: typeof FormsFormIdResponsesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AppChanelogLazyRoute,
  AppSettingsLazyRoute,
  AuthLoginLazyRoute,
  AuthSignupLazyRoute,
  AutomationsDesignerLazyRoute,
  CommunicationsContactsLazyRoute,
  DashboardsDesignerLazyRoute,
  FormsDesignerLazyRoute,
  AutomationsIndexLazyRoute,
  CommunicationsIndexLazyRoute,
  DashboardsIndexLazyRoute,
  FormsIndexLazyRoute,
  ProjectsIndexLazyRoute,
  CommunicationsEmailsDesignerLazyRoute,
  CommunicationsEmailsSchedulesLazyRoute,
  CommunicationsEmailsTemplatesLazyRoute,
  FormsFormIdAnalyticsLazyRoute,
  FormsFormIdFillLazyRoute,
  FormsFormIdPreviewLazyRoute,
  FormsFormIdResponsesLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app/chanelog",
        "/app/settings",
        "/auth/login",
        "/auth/signup",
        "/automations/designer",
        "/communications/contacts",
        "/dashboards/designer",
        "/forms/designer",
        "/automations/",
        "/communications/",
        "/dashboards/",
        "/forms/",
        "/projects/",
        "/communications/emails/designer",
        "/communications/emails/schedules",
        "/communications/emails/templates",
        "/forms/$formId/analytics",
        "/forms/$formId/fill",
        "/forms/$formId/preview",
        "/forms/$formId/responses"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/app/chanelog": {
      "filePath": "app/chanelog.lazy.tsx"
    },
    "/app/settings": {
      "filePath": "app/settings.lazy.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.lazy.tsx"
    },
    "/automations/designer": {
      "filePath": "automations/designer.lazy.tsx"
    },
    "/communications/contacts": {
      "filePath": "communications/contacts.lazy.tsx"
    },
    "/dashboards/designer": {
      "filePath": "dashboards/designer.lazy.tsx"
    },
    "/forms/designer": {
      "filePath": "forms/designer.lazy.tsx"
    },
    "/automations/": {
      "filePath": "automations/index.lazy.tsx"
    },
    "/communications/": {
      "filePath": "communications/index.lazy.tsx"
    },
    "/dashboards/": {
      "filePath": "dashboards/index.lazy.tsx"
    },
    "/forms/": {
      "filePath": "forms/index.lazy.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.lazy.tsx"
    },
    "/communications/emails/designer": {
      "filePath": "communications/emails/designer.lazy.tsx"
    },
    "/communications/emails/schedules": {
      "filePath": "communications/emails/schedules.lazy.tsx"
    },
    "/communications/emails/templates": {
      "filePath": "communications/emails/templates.lazy.tsx"
    },
    "/forms/$formId/analytics": {
      "filePath": "forms/$formId/analytics.lazy.tsx"
    },
    "/forms/$formId/fill": {
      "filePath": "forms/$formId/fill.lazy.tsx"
    },
    "/forms/$formId/preview": {
      "filePath": "forms/$formId/preview.lazy.tsx"
    },
    "/forms/$formId/responses": {
      "filePath": "forms/$formId/responses.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
