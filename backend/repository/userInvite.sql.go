// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: userInvite.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const acceptInvite = `-- name: AcceptInvite :one
update user_invites set accepted = true where id = $1 returning id, deleted, created_at, workspace_id, name, email, status, plain_text_password
`

func (q *Queries) AcceptInvite(ctx context.Context, id uuid.UUID) (UserInvite, error) {
	row := q.db.QueryRow(ctx, acceptInvite, id)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Name,
		&i.Email,
		&i.Status,
		&i.PlainTextPassword,
	)
	return i, err
}

const getUserInviteByEmail = `-- name: GetUserInviteByEmail :one
select id, deleted, created_at, workspace_id, name, email, status, plain_text_password from user_invites where email = $1 and workspace_id = $2 and accepted = false
`

type GetUserInviteByEmailParams struct {
	Email       string    `json:"email"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetUserInviteByEmail(ctx context.Context, arg GetUserInviteByEmailParams) (UserInvite, error) {
	row := q.db.QueryRow(ctx, getUserInviteByEmail, arg.Email, arg.WorkspaceID)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Name,
		&i.Email,
		&i.Status,
		&i.PlainTextPassword,
	)
	return i, err
}
