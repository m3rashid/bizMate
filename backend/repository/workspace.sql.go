// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workspace.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToWorkspace = `-- name: AddUserToWorkspace :one
insert into users_workspace_relation (user_id, workspace_id) 
	values ($1, $2) returning workspace_id, user_id
`

type AddUserToWorkspaceParams struct {
	UserID      pgtype.UUID
	WorkspaceID pgtype.UUID
}

func (q *Queries) AddUserToWorkspace(ctx context.Context, arg AddUserToWorkspaceParams) (UsersWorkspaceRelation, error) {
	row := q.db.QueryRow(ctx, addUserToWorkspace, arg.UserID, arg.WorkspaceID)
	var i UsersWorkspaceRelation
	err := row.Scan(&i.WorkspaceID, &i.UserID)
	return i, err
}

const createWorkspace = `-- name: CreateWorkspace :one
insert into workspaces (name, description, created_by_id)
	values ($1, $2, $3) returning id
`

type CreateWorkspaceParams struct {
	Name        pgtype.Text
	Description pgtype.Text
	CreatedByID pgtype.UUID
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createWorkspace, arg.Name, arg.Description, arg.CreatedByID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getCurrentUserWorkspaces = `-- name: GetCurrentUserWorkspaces :many
select id, name, description, deleted, created_at, created_by_id from workspaces 
	where deleted = false and 
	id in (select workspace_id from users_workspace_relation where user_id = $1)
`

func (q *Queries) GetCurrentUserWorkspaces(ctx context.Context, userID pgtype.UUID) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, getCurrentUserWorkspaces, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Deleted,
			&i.CreatedAt,
			&i.CreatedByID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceById = `-- name: GetWorkspaceById :one
select id, name, description, deleted, created_at, created_by_id from workspaces where id = $1 and deleted = false
`

func (q *Queries) GetWorkspaceById(ctx context.Context, id pgtype.UUID) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspaceById, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Deleted,
		&i.CreatedAt,
		&i.CreatedByID,
	)
	return i, err
}
