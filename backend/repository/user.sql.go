// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users (id, email, password, name, provider, refresh_token, phone, avatar) 
	values ($1, $2, $3, $4, $5, $6, $7, $8) 
	returning id, deleted, created_at, name, email, phone, avatar, deactivated, provider, password, refresh_token
`

type CreateUserParams struct {
	ID           uuid.UUID
	Email        string
	Password     string
	Name         string
	Provider     string
	RefreshToken string
	Phone        string
	Avatar       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Provider,
		arg.RefreshToken,
		arg.Phone,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Avatar,
		&i.Deactivated,
		&i.Provider,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, deleted, created_at, name, email, phone, avatar, deactivated, provider, password, refresh_token from users where deleted = false and email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Avatar,
		&i.Deactivated,
		&i.Provider,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, deleted, created_at, name, email, phone, avatar, deactivated, provider, password, refresh_token from users where deleted = false and id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Avatar,
		&i.Deactivated,
		&i.Provider,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}
