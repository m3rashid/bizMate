// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permission.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addBarePermissionTouser = `-- name: AddBarePermissionTouser :exec
insert into bare_permissions (
	user_id,
	workspace_id,
	permission
) values ($1, $2, $3)
`

type AddBarePermissionTouserParams struct {
	UserID      uuid.UUID `json:"user_id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Permission  int32     `json:"permission"`
}

func (q *Queries) AddBarePermissionTouser(ctx context.Context, arg AddBarePermissionTouserParams) error {
	_, err := q.db.Exec(ctx, addBarePermissionTouser, arg.UserID, arg.WorkspaceID, arg.Permission)
	return err
}

const getUserBarePermissions = `-- name: GetUserBarePermissions :many
select id, object_type, object_id, user_id, workspace_id, permission from bare_permissions where user_id = $1 and workspace_id = $2
`

type GetUserBarePermissionsParams struct {
	UserID      uuid.UUID `json:"user_id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetUserBarePermissions(ctx context.Context, arg GetUserBarePermissionsParams) ([]BarePermission, error) {
	rows, err := q.db.Query(ctx, getUserBarePermissions, arg.UserID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BarePermission
	for rows.Next() {
		var i BarePermission
		if err := rows.Scan(
			&i.ID,
			&i.ObjectType,
			&i.ObjectID,
			&i.UserID,
			&i.WorkspaceID,
			&i.Permission,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBarePermissionFromUser = `-- name: RemoveBarePermissionFromUser :exec
delete from bare_permissions where user_id = $1 and workspace_id = $2 and permission = $3
`

type RemoveBarePermissionFromUserParams struct {
	UserID      uuid.UUID `json:"user_id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Permission  int32     `json:"permission"`
}

func (q *Queries) RemoveBarePermissionFromUser(ctx context.Context, arg RemoveBarePermissionFromUserParams) error {
	_, err := q.db.Exec(ctx, removeBarePermissionFromUser, arg.UserID, arg.WorkspaceID, arg.Permission)
	return err
}
