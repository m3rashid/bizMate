// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dashboard.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const countFormsInWorkspace = `-- name: CountFormsInWorkspace :many
select count(id), active from forms where workspace_id = $1 and deleted = false group by active
`

type CountFormsInWorkspaceRow struct {
	Count  int64 `json:"count"`
	Active *bool `json:"active"`
}

func (q *Queries) CountFormsInWorkspace(ctx context.Context, workspaceID uuid.UUID) ([]CountFormsInWorkspaceRow, error) {
	rows, err := q.db.Query(ctx, countFormsInWorkspace, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountFormsInWorkspaceRow
	for rows.Next() {
		var i CountFormsInWorkspaceRow
		if err := rows.Scan(&i.Count, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countUsersInWorkspace = `-- name: CountUsersInWorkspace :one
select count(user_id) from users_workspaces_relation where workspace_id = $1 and deleted = false
`

func (q *Queries) CountUsersInWorkspace(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersInWorkspace, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
