// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: form.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createForm = `-- name: CreateForm :exec
insert into forms (
	id,
	workspace_id,
	created_by_id,
	title,
	description,
	active,
	send_response_email,
	allow_anonymous_responses,
	allow_multiple_responses,
	submit_text,
	cancel_text
) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateFormParams struct {
	ID                      uuid.UUID `json:"id"`
	WorkspaceID             uuid.UUID `json:"workspace_id"`
	CreatedByID             uuid.UUID `json:"created_by_id"`
	Title                   string    `json:"title"`
	Description             string    `json:"description"`
	Active                  *bool     `json:"active"`
	SendResponseEmail       *bool     `json:"send_response_email"`
	AllowAnonymousResponses *bool     `json:"allow_anonymous_responses"`
	AllowMultipleResponses  *bool     `json:"allow_multiple_responses"`
	SubmitText              *string   `json:"submit_text"`
	CancelText              *string   `json:"cancel_text"`
}

func (q *Queries) CreateForm(ctx context.Context, arg CreateFormParams) error {
	_, err := q.db.Exec(ctx, createForm,
		arg.ID,
		arg.WorkspaceID,
		arg.CreatedByID,
		arg.Title,
		arg.Description,
		arg.Active,
		arg.SendResponseEmail,
		arg.AllowAnonymousResponses,
		arg.AllowMultipleResponses,
		arg.SubmitText,
		arg.CancelText,
	)
	return err
}

const deleteForm = `-- name: DeleteForm :exec
update forms set deleted = true where id = $1
`

func (q *Queries) DeleteForm(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteForm, id)
	return err
}

const getFormById = `-- name: GetFormById :one
select id, deleted, created_at, workspace_id, created_by_id, title, description, form_body, active, submit_text, cancel_text, send_response_email, allow_anonymous_responses, allow_multiple_responses from forms where id = $1 and deleted = false
`

func (q *Queries) GetFormById(ctx context.Context, id uuid.UUID) (Form, error) {
	row := q.db.QueryRow(ctx, getFormById, id)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.CreatedByID,
		&i.Title,
		&i.Description,
		&i.FormBody,
		&i.Active,
		&i.SubmitText,
		&i.CancelText,
		&i.SendResponseEmail,
		&i.AllowAnonymousResponses,
		&i.AllowMultipleResponses,
	)
	return i, err
}

const getFormsCount = `-- name: GetFormsCount :one
select count(id) from forms where workspace_id = $1 and deleted = false
`

func (q *Queries) GetFormsCount(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getFormsCount, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const paginateForms = `-- name: PaginateForms :many
select
	id,
	created_at,
	workspace_id,
	created_by_id,
	title,
	active,
	description,
	send_response_email,
	allow_anonymous_responses,
	allow_multiple_responses,
	submit_text,
	cancel_text
from forms where workspace_id = $1 and deleted = false order by id desc limit $2 offset $3
`

type PaginateFormsParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

type PaginateFormsRow struct {
	ID                      uuid.UUID          `json:"id"`
	CreatedAt               pgtype.Timestamptz `json:"created_at"`
	WorkspaceID             uuid.UUID          `json:"workspace_id"`
	CreatedByID             uuid.UUID          `json:"created_by_id"`
	Title                   string             `json:"title"`
	Active                  *bool              `json:"active"`
	Description             string             `json:"description"`
	SendResponseEmail       *bool              `json:"send_response_email"`
	AllowAnonymousResponses *bool              `json:"allow_anonymous_responses"`
	AllowMultipleResponses  *bool              `json:"allow_multiple_responses"`
	SubmitText              *string            `json:"submit_text"`
	CancelText              *string            `json:"cancel_text"`
}

func (q *Queries) PaginateForms(ctx context.Context, arg PaginateFormsParams) ([]PaginateFormsRow, error) {
	rows, err := q.db.Query(ctx, paginateForms, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaginateFormsRow
	for rows.Next() {
		var i PaginateFormsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.WorkspaceID,
			&i.CreatedByID,
			&i.Title,
			&i.Active,
			&i.Description,
			&i.SendResponseEmail,
			&i.AllowAnonymousResponses,
			&i.AllowMultipleResponses,
			&i.SubmitText,
			&i.CancelText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateForm = `-- name: UpdateForm :exec
update forms set
	title = $2,
	description = $3,
	active = $4,
	send_response_email = $5,
	allow_anonymous_responses = $6,
	allow_multiple_responses = $7,
	submit_text = $8,
	cancel_text = $9
where id = $1 and deleted = false
`

type UpdateFormParams struct {
	ID                      uuid.UUID `json:"id"`
	Title                   string    `json:"title"`
	Description             string    `json:"description"`
	Active                  *bool     `json:"active"`
	SendResponseEmail       *bool     `json:"send_response_email"`
	AllowAnonymousResponses *bool     `json:"allow_anonymous_responses"`
	AllowMultipleResponses  *bool     `json:"allow_multiple_responses"`
	SubmitText              *string   `json:"submit_text"`
	CancelText              *string   `json:"cancel_text"`
}

func (q *Queries) UpdateForm(ctx context.Context, arg UpdateFormParams) error {
	_, err := q.db.Exec(ctx, updateForm,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Active,
		arg.SendResponseEmail,
		arg.AllowAnonymousResponses,
		arg.AllowMultipleResponses,
		arg.SubmitText,
		arg.CancelText,
	)
	return err
}

const updateFormBody = `-- name: UpdateFormBody :exec
update forms set form_body = $2 where id = $1 and deleted = false
`

type UpdateFormBodyParams struct {
	ID       uuid.UUID `json:"id"`
	FormBody FormBody  `json:"form_body"`
}

func (q *Queries) UpdateFormBody(ctx context.Context, arg UpdateFormBodyParams) error {
	_, err := q.db.Exec(ctx, updateFormBody, arg.ID, arg.FormBody)
	return err
}
