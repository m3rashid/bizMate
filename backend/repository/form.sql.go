// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: form.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createForm = `-- name: CreateForm :one
insert into forms (
	id,
	workspace_id,
	created_by_id,
	title,
	description,
	active,
	send_response_email,
	allow_anonymous_response,
	allow_multiple_response,
	form_body_id
) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) returning id, deleted, created_at, workspace_id, created_by_id, title, description, form_body_id, active, send_response_email, allow_anonymous_response, allow_multiple_response
`

type CreateFormParams struct {
	ID                     uuid.UUID `json:"id"`
	WorkspaceID            uuid.UUID `json:"workspace_id"`
	CreatedByID            uuid.UUID `json:"created_by_id"`
	Title                  string    `json:"title"`
	Description            string    `json:"description"`
	Active                 *bool     `json:"active"`
	SendResponseEmail      *bool     `json:"send_response_email"`
	AllowAnonymousResponse *bool     `json:"allow_anonymous_response"`
	AllowMultipleResponse  *bool     `json:"allow_multiple_response"`
	FormBodyID             string    `json:"form_body_id"`
}

func (q *Queries) CreateForm(ctx context.Context, arg CreateFormParams) (Form, error) {
	row := q.db.QueryRow(ctx, createForm,
		arg.ID,
		arg.WorkspaceID,
		arg.CreatedByID,
		arg.Title,
		arg.Description,
		arg.Active,
		arg.SendResponseEmail,
		arg.AllowAnonymousResponse,
		arg.AllowMultipleResponse,
		arg.FormBodyID,
	)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.CreatedByID,
		&i.Title,
		&i.Description,
		&i.FormBodyID,
		&i.Active,
		&i.SendResponseEmail,
		&i.AllowAnonymousResponse,
		&i.AllowMultipleResponse,
	)
	return i, err
}

const getFormById = `-- name: GetFormById :one
select id, deleted, created_at, workspace_id, created_by_id, title, description, form_body_id, active, send_response_email, allow_anonymous_response, allow_multiple_response from forms where id = $1 and workspace_id = $2
`

type GetFormByIdParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetFormById(ctx context.Context, arg GetFormByIdParams) (Form, error) {
	row := q.db.QueryRow(ctx, getFormById, arg.ID, arg.WorkspaceID)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.CreatedByID,
		&i.Title,
		&i.Description,
		&i.FormBodyID,
		&i.Active,
		&i.SendResponseEmail,
		&i.AllowAnonymousResponse,
		&i.AllowMultipleResponse,
	)
	return i, err
}

const getFormsCount = `-- name: GetFormsCount :one
select count(id) from forms where workspace_id = $1
`

func (q *Queries) GetFormsCount(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getFormsCount, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const paginateForms = `-- name: PaginateForms :many
select id, deleted, created_at, workspace_id, created_by_id, title, description, form_body_id, active, send_response_email, allow_anonymous_response, allow_multiple_response from forms where workspace_id = $1 order by id desc limit $2 offset $3
`

type PaginateFormsParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) PaginateForms(ctx context.Context, arg PaginateFormsParams) ([]Form, error) {
	rows, err := q.db.Query(ctx, paginateForms, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Form
	for rows.Next() {
		var i Form
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.CreatedAt,
			&i.WorkspaceID,
			&i.CreatedByID,
			&i.Title,
			&i.Description,
			&i.FormBodyID,
			&i.Active,
			&i.SendResponseEmail,
			&i.AllowAnonymousResponse,
			&i.AllowMultipleResponse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateForm = `-- name: UpdateForm :one
update forms set
	title = $2,
	description = $3,
	active = $4,
	send_response_email = $5,
	allow_anonymous_response = $6,
	allow_multiple_response = $7
where id = $1 returning id, deleted, created_at, workspace_id, created_by_id, title, description, form_body_id, active, send_response_email, allow_anonymous_response, allow_multiple_response
`

type UpdateFormParams struct {
	ID                     uuid.UUID `json:"id"`
	Title                  string    `json:"title"`
	Description            string    `json:"description"`
	Active                 *bool     `json:"active"`
	SendResponseEmail      *bool     `json:"send_response_email"`
	AllowAnonymousResponse *bool     `json:"allow_anonymous_response"`
	AllowMultipleResponse  *bool     `json:"allow_multiple_response"`
}

func (q *Queries) UpdateForm(ctx context.Context, arg UpdateFormParams) (Form, error) {
	row := q.db.QueryRow(ctx, updateForm,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Active,
		arg.SendResponseEmail,
		arg.AllowAnonymousResponse,
		arg.AllowMultipleResponse,
	)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.CreatedByID,
		&i.Title,
		&i.Description,
		&i.FormBodyID,
		&i.Active,
		&i.SendResponseEmail,
		&i.AllowAnonymousResponse,
		&i.AllowMultipleResponse,
	)
	return i, err
}
