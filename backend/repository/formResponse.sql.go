// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: formResponse.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createFormResponse = `-- name: CreateFormResponse :exec
insert into form_responses (
	id,
	form_id,
	workspace_id,
	created_by_id,
	device_ip,
	response
) values ($1, $2, $3, $4, $5, $6)
`

type CreateFormResponseParams struct {
	ID          uuid.UUID   `json:"id"`
	FormID      uuid.UUID   `json:"form_id"`
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	CreatedByID pgtype.UUID `json:"created_by_id"`
	DeviceIp    *string     `json:"device_ip"`
	Response    []byte      `json:"response"`
}

func (q *Queries) CreateFormResponse(ctx context.Context, arg CreateFormResponseParams) error {
	_, err := q.db.Exec(ctx, createFormResponse,
		arg.ID,
		arg.FormID,
		arg.WorkspaceID,
		arg.CreatedByID,
		arg.DeviceIp,
		arg.Response,
	)
	return err
}

const deleteFormResponse = `-- name: DeleteFormResponse :exec
update form_responses set deleted = true where id = $1
`

func (q *Queries) DeleteFormResponse(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFormResponse, id)
	return err
}

const getFormResponseByFormId = `-- name: GetFormResponseByFormId :many
select id, form_id, deleted, workspace_id, created_at, created_by_id, device_ip, response from form_responses where form_id = $1 and workspace_id = $2 and deleted = false
`

type GetFormResponseByFormIdParams struct {
	FormID      uuid.UUID `json:"form_id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetFormResponseByFormId(ctx context.Context, arg GetFormResponseByFormIdParams) ([]FormResponse, error) {
	rows, err := q.db.Query(ctx, getFormResponseByFormId, arg.FormID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FormResponse
	for rows.Next() {
		var i FormResponse
		if err := rows.Scan(
			&i.ID,
			&i.FormID,
			&i.Deleted,
			&i.WorkspaceID,
			&i.CreatedAt,
			&i.CreatedByID,
			&i.DeviceIp,
			&i.Response,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFormResponseById = `-- name: GetFormResponseById :one
select id, form_id, deleted, workspace_id, created_at, created_by_id, device_ip, response from form_responses where id = $1 and workspace_id = $2 and deleted = false
`

type GetFormResponseByIdParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetFormResponseById(ctx context.Context, arg GetFormResponseByIdParams) (FormResponse, error) {
	row := q.db.QueryRow(ctx, getFormResponseById, arg.ID, arg.WorkspaceID)
	var i FormResponse
	err := row.Scan(
		&i.ID,
		&i.FormID,
		&i.Deleted,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.DeviceIp,
		&i.Response,
	)
	return i, err
}

const getFormResponsesCount = `-- name: GetFormResponsesCount :one
select count(id) from form_responses where form_id = $1 and workspace_id = $2 and deleted = false
`

type GetFormResponsesCountParams struct {
	FormID      uuid.UUID `json:"form_id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetFormResponsesCount(ctx context.Context, arg GetFormResponsesCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getFormResponsesCount, arg.FormID, arg.WorkspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const paginateFormResponses = `-- name: PaginateFormResponses :many
select
	id,
	created_at,
	form_id,
	workspace_id,
	created_by_id,
	device_ip,
	response
from form_responses where form_id = $1 and workspace_id = $2 and deleted = false order by id desc limit $3 offset $4
`

type PaginateFormResponsesParams struct {
	FormID      uuid.UUID `json:"form_id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

type PaginateFormResponsesRow struct {
	ID          uuid.UUID          `json:"id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	FormID      uuid.UUID          `json:"form_id"`
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	CreatedByID pgtype.UUID        `json:"created_by_id"`
	DeviceIp    *string            `json:"device_ip"`
	Response    []byte             `json:"response"`
}

func (q *Queries) PaginateFormResponses(ctx context.Context, arg PaginateFormResponsesParams) ([]PaginateFormResponsesRow, error) {
	rows, err := q.db.Query(ctx, paginateFormResponses,
		arg.FormID,
		arg.WorkspaceID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaginateFormResponsesRow
	for rows.Next() {
		var i PaginateFormResponsesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.FormID,
			&i.WorkspaceID,
			&i.CreatedByID,
			&i.DeviceIp,
			&i.Response,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFormResponse = `-- name: UpdateFormResponse :exec
update form_responses set response = $2 where id = $1 and deleted = false
`

type UpdateFormResponseParams struct {
	ID       uuid.UUID `json:"id"`
	Response []byte    `json:"response"`
}

func (q *Queries) UpdateFormResponse(ctx context.Context, arg UpdateFormResponseParams) error {
	_, err := q.db.Exec(ctx, updateFormResponse, arg.ID, arg.Response)
	return err
}
