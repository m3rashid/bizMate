// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workspaceInvite.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createWorkspaceInvite = `-- name: CreateWorkspaceInvite :exec
insert into workspace_invites (id, workspace_id, email, created_by_id) values ($1, $2, $3, $4)
`

type CreateWorkspaceInviteParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Email       string    `json:"email"`
	CreatedByID uuid.UUID `json:"created_by_id"`
}

func (q *Queries) CreateWorkspaceInvite(ctx context.Context, arg CreateWorkspaceInviteParams) error {
	_, err := q.db.Exec(ctx, createWorkspaceInvite,
		arg.ID,
		arg.WorkspaceID,
		arg.Email,
		arg.CreatedByID,
	)
	return err
}

const deleteWorkspaceInvite = `-- name: DeleteWorkspaceInvite :exec
delete from workspace_invites where id = $1
`

func (q *Queries) DeleteWorkspaceInvite(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorkspaceInvite, id)
	return err
}

const getInviteById = `-- name: GetInviteById :one
select id, workspace_id, email, status, created_by_id, created_at from workspace_invites where id = $1
`

func (q *Queries) GetInviteById(ctx context.Context, id uuid.UUID) (WorkspaceInvite, error) {
	row := q.db.QueryRow(ctx, getInviteById, id)
	var i WorkspaceInvite
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Email,
		&i.Status,
		&i.CreatedByID,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkspaceInviteByEmail = `-- name: GetWorkspaceInviteByEmail :many
select 
	workspace_invites.id as invite_id,
	workspaces.id as workspace_id,
	workspaces.name as workspace_name,
	workspace_invites.email as email,
	workspace_invites.status as status,
	workspace_invites.created_by_id as created_by_id
from workspace_invites 
inner join workspaces on workspace_invites.workspace_id = workspaces.id 
where email = $1
`

type GetWorkspaceInviteByEmailRow struct {
	InviteID      uuid.UUID `json:"invite_id"`
	WorkspaceID   uuid.UUID `json:"workspace_id"`
	WorkspaceName string    `json:"workspace_name"`
	Email         string    `json:"email"`
	Status        int32     `json:"status"`
	CreatedByID   uuid.UUID `json:"created_by_id"`
}

func (q *Queries) GetWorkspaceInviteByEmail(ctx context.Context, email string) ([]GetWorkspaceInviteByEmailRow, error) {
	rows, err := q.db.Query(ctx, getWorkspaceInviteByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspaceInviteByEmailRow
	for rows.Next() {
		var i GetWorkspaceInviteByEmailRow
		if err := rows.Scan(
			&i.InviteID,
			&i.WorkspaceID,
			&i.WorkspaceName,
			&i.Email,
			&i.Status,
			&i.CreatedByID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
